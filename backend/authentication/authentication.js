const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;

// data for testing
users = [
    {
        userid: 1,  //generated by counting the number of tuples
        realname: "no real name",
        username: "name1",
        phonenumber: 12345678,
        email: "name1@gmail.com",
        role: "student", //indicate the user is a student or tutor
        isVerified: true,
        password: "name1",//should be salted
        roomIds: [12, 11]
    },
    {
        userid: 2,  //generated by counting the number of tuples
        realname: "also no real name",
        username: "name2",
        phonenumber: 87654321,
        email: "name2@gmail.com",
        role: "teacher", //indicate the user is a student or tutor
        isVerified: true,
        password: "name2",//should be salted
        roomIds: [11]
    },
    {
        userid: 3,  //generated by counting the number of tuples
        realname: "still no real name",
        username: "name3",
        phonenumber: 2345789,
        email: "name3@gmail.com",
        role: "teacher", //indicate the user is a student or tutor
        isVerified: true,
        password: "name3",//should be salted
        roomIds: []
    }
]

function initializePassport(app, io) {
    if (app) {
        app.use(passport.initialize());
        app.use(passport.session());
    }

    if (io) {
        const wrap = middleware => (socket, next) => middleware(socket.request, {}, next);
        io.use(wrap(passport.initialize()));
        io.use(wrap(passport.session()));
    }


    passport.use(new LocalStrategy({ usernameField: 'email' }, authenticateUser))

    passport.serializeUser((user, done) => {
        done(null, user.userid);
    })

    passport.deserializeUser((id, done) => {
        return done(null, getUserById(id));
    })

    function authenticateUser(email, password, done) {
        const user = getUserByEmail(email);

        if (user == null) {
            return done(null, false, { message: "no user with that email" });
        }

        if (password == user.password) {
            return done(null, user)
        } else {
            return done(null, false, { message: "password incorrect" })
        }
    }

    // Access user from database using email
    function getUserByEmail(email) {
        let returnUser = null;
        users.forEach((user) => {
            if (user.email == email) {
                returnUser = user;
                console.log("success")
            }
        })

        return returnUser;
    }  


    // Access user from database using id
    function getUserById(id) {
        let returnUser = null;
        users.forEach((user) => {
            if (user.userid == id) {
                returnUser = user;
            }
        })

        return returnUser;
    }
}

function authenticate() {
    return passport.authenticate('local')
}


module.exports = {
    // Initialize:
    // const session = require('express-session');
    // const sessionMiddleware = session({ secret: "changeit", resave: false, saveUninitialized: false });
    // app.use(sessionMiddleware);
    // initializePassport(app, io);
    initializePassport: initializePassport,

    // Login:
    // app.post('/login', authenticate())
    authenticate: authenticate
};

// logout : req.logOut()
// check have been authenticated : req.isAuthenticated()
// get user info : req.user